Table A 
Id name
1 A1
2 A2
3 A3


Table B
Id name ref_id (FK a.id)
1 B1 1
2 B2 1
3 B3 2


Select * from A a inner join B b on a.id = b.ref_id
a.Id	A.name B.Id	B.Name ref_id
1	A1	1 	B1	1
1	A1	2 	B2	1
2	A2	3 	B3	2

Select * from A a left  join B b on a.id = b.ref_id

a.ID	A.name   B.Id B.name ref_id
1	A1 	1	B1	1
1	A1	2	B2	1
2	A2	3	B3	2
3	A3	null	null	null

@Entity
Class A{
@Id
int aId;
String name;

void setName(String name){
this.name=name;
}
String getName(){
Return this.name;
}
Void setId(int Id)
{
this.aid=id;
}
Int getId(){
Return this.aid;}
}



@Entity
Class B{
@Id
Int bid;
Int ref_id;
String name;
@ManyToOne
Ref_id = a.aid;
Void setbId(int id){this.bid=id;}
Void setaid(){this.aid=a.aid;}
Void setBName(String name){this.name=name;}
String getName(){return this.name;}
Int geBtId(return this.bid)

}

Class BRepo extends JPARepository<B>{

@Query(“from B where b.ref_id =a.id ”)
List<B> findBbyref_id(A a)
Return repo.findAll();
}


@Controller
Class A{
	@Autowired
	B b;

	@GetMapping(“/get”)
	Public void m1(){
		
		b.m2();
	}
}

@Component
@scope(“prototype”)
Class B
{
	Int a = 10;
	
	Public void m2(){
		sout(a++);
	}
}



R#1:
R#2:
R#3:



Class A {
void m1() { sop(“m1- A”)}
}

Class B extends A{
Void m1() { sop(“m1- B”)}
Void m2() { sop(“m2- B”)}       
}

A a = new B();
B b = new A();

a.m1();.
B b1 =(B)a;
b1.m2();

catadsfdfgzbBassfdSssdA
public String validate(String str)
{String s ="";
for(int i=0;i<str.length-1;i++)
{
if(Math.abs((int)str.charAt(i)-(int)str.charAt(i+1))==diff)
i=i+1;
else
s=s+str.charAt(i);
return s;
}


}.

L 8 R 5

[yteu, abc, abcd, abdsf, adfd]
Employee 
Name JD

Select * from Employee Order By JD Limit 100;
SNo BookId StudentId
1	1	1
2	2	1

more than 5 books

class LibRepo implements JPARepository<Library,Integer>{}
@Query("select StudentId,Count(*) from Library GROUP By StudentId ")
List<Object> findStudGFive();


class Controller{
@Autowired
Librepo repo;
public List<Library> StudeGFive(){

	return (List<New>)repo.findStudGFive();
	
}}
